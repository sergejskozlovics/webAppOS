  plugins {
    id 'java'
    id 'application'
  }

  compileJava.options.encoding = "UTF-8"

  project.buildDir = file('../../build')

  repositories {
      mavenCentral()
  }


dependencies {

  // slf4j used everywhere
      implementation 'org.slf4j:slf4j-api:1.7.25'
      //implementation 'org.slf4j:slf4j-simple:1.7.25'

  // log4j2 as underlying implementation for slf4j
      implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'
      implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'
      implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.2'

  // jetty server
      implementation 'org.eclipse.jetty:jetty-server:9.4.14.v20181114'
      implementation 'org.eclipse.jetty:jetty-servlet:9.4.14.v20181114'
      implementation 'org.eclipse.jetty:jetty-webapp:9.4.14.v20181114'
      implementation 'org.eclipse.jetty:jetty-proxy:9.4.14.v20181114'
      implementation 'org.eclipse.jetty.fcgi:fcgi-client:9.4.14.v20181114'
      implementation 'org.eclipse.jetty.fcgi:fcgi-server:9.4.14.v20181114'
      implementation 'org.eclipse.jetty.websocket:websocket-api:9.4.14.v20181114'
      implementation 'org.eclipse.jetty.websocket:websocket-common:9.4.14.v20181114'
      implementation 'org.eclipse.jetty.websocket:websocket-servlet:9.4.14.v20181114'
      implementation 'org.eclipse.jetty.websocket:websocket-server:9.4.14.v20181114'

  // javafx
  String osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
      implementation 'org.openjfx:javafx-base:11.0.2:win'
      implementation 'org.openjfx:javafx-controls:11.0.2:win'
      implementation 'org.openjfx:javafx-fxml:11.0.2:win'
      implementation 'org.openjfx:javafx-graphics:11.0.2:win'
      implementation 'org.openjfx:javafx-media:11.0.2:win'
      implementation 'org.openjfx:javafx-swing:11.0.2:win'
      implementation 'org.openjfx:javafx-web:11.0.2:win'
  }
  else
  if (osName.contains("mac os")) {
      implementation 'org.openjfx:javafx-base:11.0.2:mac'
      implementation 'org.openjfx:javafx-controls:11.0.2:mac'
      implementation 'org.openjfx:javafx-fxml:11.0.2:mac'
      implementation 'org.openjfx:javafx-graphics:11.0.2:mac'
      implementation 'org.openjfx:javafx-media:11.0.2:mac'
      implementation 'org.openjfx:javafx-swing:11.0.2:mac'
      implementation 'org.openjfx:javafx-web:11.0.2:mac'
  }
  else {
      implementation 'org.openjfx:javafx-base:11.0.2:linux'
      implementation 'org.openjfx:javafx-controls:11.0.2:linux'
      implementation 'org.openjfx:javafx-fxml:11.0.2:linux'
      implementation 'org.openjfx:javafx-graphics:11.0.2:linux'
      implementation 'org.openjfx:javafx-media:11.0.2:linux'
      implementation 'org.openjfx:javafx-swing:11.0.2:linux'
      implementation 'org.openjfx:javafx-web:11.0.2:linux'
  }

  // cloudrail API
      implementation 'com.cloudrail:cloudrail-si-java:2.21.11'

  // javamail
      implementation 'com.sun.mail:javax.mail:1.6.2'

  // common libraries
      implementation 'commons-io:commons-io:2.6'
      implementation 'commons-fileupload:commons-fileupload:1.4'
      implementation 'org.apache.commons:commons-text:1.8'
      implementation 'org.apache.commons:commons-lang3:3.9'
      implementation 'org.apache.directory.studio:org.apache.commons.codec:1.8'
      implementation 'com.google.code.gson:gson:2.8.5'
      implementation 'org.codehaus.jettison:jettison:1.4.0'

  // Google Guava (for MultiSet)
      implementation 'com.google.guava:guava:27.1-jre'
     // implementation 'com.google.guava:guava:26.0-android'

  // lightcouch (for couchdb registry)
      implementation 'org.lightcouch:lightcouch:0.2.0'

  // ACME libs and bouncycastle libs (for ACME CertBot)
  // TODO: acmev2.6
      implementation 'org.shredzone.acme4j:acme4j-client:1.1'
      implementation 'org.shredzone.acme4j:acme4j-utils:1.1'
      implementation 'org.bouncycastle:bcpkix-jdk15on:1.60'
      implementation 'org.bouncycastle:bcprov-jdk15on:1.60'

  // for lua web processor (v3.0.x - for Lua 5.2, we need v2.0.x for Lua 5.1 )
  //    implementation 'org.luaj:luaj-jse:2.0.3'
  //    implementation 'org.apache.bcel:bcel:5.2'
  // currently, we exclude it from packages, since LuaJ 2.0.3 sources are bundled into webAppOS sys

  // for ecore repository adapter
      implementation group: 'org.eclipse.emf', name: 'org.eclipse.emf.common', version: '2.15.0'
      implementation group: 'org.eclipse.emf', name: 'org.eclipse.emf.ecore', version: '2.15.0'
      implementation group: 'org.eclipse.emf', name: 'org.eclipse.emf.ecore.xmi', version: '2.15.0'

  }

  sourceSets {
    main.java.srcDirs = ['src']
    main {
      output.resourcesDir = file('bin')
      java.outputDir = file('bin')
    }
  }

  // Define the main class for the application
  application {
    mainClass.set("org.webappos.server.Gate")
    applicationDefaultJvmArgs = ['-Dlog4j.configurationFile=LOG4J_CONF_PLACEHOLDER','-Dorg.eclipse.jetty.util.log.class=org.eclipse.jetty.util.log.Slf4jLog']
  }

  distZip.enabled = false
  distTar.enabled = false
  jar.enabled = false

  startScripts {
    applicationName = 'webappos'
    classpath += files('BIN_PLACEHOLDER')
    doLast {
      def windowsScriptFile = file getWindowsScript()
      def unixScriptFile    = file getUnixScript()
      windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\BIN_PLACEHOLDER', '%APP_HOME%\\sys\\bin')
      windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\webappos.jar', '%APP_HOME%\\sys\\bin')

      unixScriptFile.text  = unixScriptFile.text.replace('$APP_HOME/lib/BIN_PLACEHOLDER', '$APP_HOME/sys/bin')
      unixScriptFile.text  = unixScriptFile.text.replace('$APP_HOME/lib/webappos.jar', '$APP_HOME/sys/bin')
      windowsScriptFile.text = windowsScriptFile.text.replace('LOG4J_CONF_PLACEHOLDER', '%APP_HOME%\\etc\\log4j2.properties')
      unixScriptFile.text  = unixScriptFile.text.replace('LOG4J_CONF_PLACEHOLDER', '$APP_HOME/etc/log4j2.properties')
    }
  }

  installDist {
    doFirst {
          mkdir "../bin"
          mkdir "../home"
    }
    into('..')  // relative to this gradle project
    preserve({
          include 'apps/**'
          include 'bin'
          include 'bin/**'
          exclude 'bin/webappos*'
          include 'cache/**'
          include 'engines/**'
          include 'etc/**'
          include 'home/**'
          include 'lib/lua/**'
          include 'lib/native/**'
          include 'sys/**'
          include 'var/**'
          include 'web-root/**'
    })
    doLast {
      delete fileTree('bin').matching {
        include "webappos.org"
        include "webappos.org.bat"
      }
      if (!file('../etc/webappos.properties').exists())
        copy {
          from("../etc")
          into("../etc")
          include("webappos.properties.template")
          rename("webappos.properties.template", "webappos.properties")
        }
    }
  }



task install {
    dependsOn installDist
}
